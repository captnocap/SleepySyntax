// VERBOSE BLOG - "You can be as specific as you want"

{
  blog$complete_publishing_platform:(
    styles:(
      theme:(
        primary:#2563eb,
        secondary:#64748b, 
        accent:#f59e0b,
        background:#f8fafc,
        text:#1e293b
      ),
      layout:(
        container:max-width_1200px_mx-auto,
        grid:grid_gap-6,
        card:bg-white_rounded-lg_shadow-md_p-6
      ),
      typography:(
        heading:font-bold_text-2xl_mb-4,
        body:text-gray-700_leading-relaxed,
        link:text-blue-600_hover:underline
      )
    ),
    frontend:(
      header:(
        row$navbar:[
          logo:(
            img:api.site.logo,
            h1:api.site.title
          ),
          nav$main:(
            forEach:api.navigation.items:[
              link:(
                href:item.url,
                text:item.label,
                &active:[class:active]
              )
            ]
          ),
          search:(
            input:api.search.query,
            button:Search
          ),
          auth:(
            if:api.user.isLoggedIn:[
              button$user-menu:api.user.name
            ],
            unless:api.user.isLoggedIn:[
              button:Login,
              button$primary:Sign_Up
            ]
          )
        ]
      ),
      main$content:(
        row:[
          section$posts:(
            column:[
              h1:Latest_Posts,
              forEach:api.posts.featured:[
                card$featured:(
                  img:item.featuredImage,
                  column:[
                    badge$category:item.category,
                    h2:item.title,
                    p:item.excerpt,
                    row$meta:[
                      img$avatar:item.author.avatar,
                      span:item.author.name,
                      span:item.publishedDate,
                      span:item.readTime_min_read
                    ],
                    row$actions:[
                      button:Read_More,
                      button$ghost:Share,
                      button$ghost:Bookmark
                    ]
                  ]
                )
              ],
              pagination:(
                button:Previous,
                forEach:api.posts.pagination:[
                  button$page:item.number
                ],
                button:Next
              )
            ]
          ),
          aside$sidebar:(
            column:[
              widget$about:(
                h3:About,
                p:api.site.description,
                button:Learn_More
              ),
              widget$categories:(
                h3:Categories,
                forEach:api.categories.popular:[
                  link:(
                    text:item.name,
                    count:item.postCount
                  )
                ]
              ),
              widget$recent:(
                h3:Recent_Posts,
                forEach:api.posts.recent:[
                  row$mini-post:[
                    img$thumbnail:item.thumbnail,
                    column:[
                      h4:item.title,
                      small:item.publishedDate
                    ]
                  ]
                ]
              ),
              widget$newsletter:(
                h3:Subscribe,
                p:Get_latest_posts_delivered,
                input_email:api.newsletter.email,
                button$primary:Subscribe
              )
            ]
          )
        ]
      ),
      footer:(
        row$footer-content:[
          column$company:[
            h4:api.site.title,
            p:api.site.tagline,
            row$social:[
              forEach:api.social.links:[
                link$social:(
                  icon:item.platform,
                  href:item.url
                )
              ]
            ]
          ],
          column$links:[
            h4:Quick_Links,
            forEach:api.footer.links:[
              link:item.label
            ]
          ],
          column$legal:[
            h4:Legal,
            link:Privacy_Policy,
            link:Terms_of_Service,
            link:Cookie_Policy
          ]
        ],
        row$copyright:[
          p:Â©_2024_api.site.title._All_rights_reserved.
        ]
      )
    ),
    api:(
      posts:(
        GET:/posts:(
          query:(
            category:string,
            author:string,
            search:string,
            limit:int_default_10,
            offset:int_default_0,
            sort:enum_date_title_popular_default_date
          ),
          returns:(
            posts:db.posts.search(query),
            pagination:calculate_pagination(query),
            featured:db.posts.getFeatured(5)
          )
        ),
        GET:/posts/:slug:(
          validate:slug_exists,
          exec:(
            post:db.posts.findBySlug(params.slug),
            views:db.analytics.incrementViews(post.id),
            related:db.posts.getRelated(post.id, 3),
            comments:db.comments.getByPostId(post.id)
          ),
          returns:(
            post:post,
            related:related,
            comments:comments,
            analytics:views
          )
        ),
        POST:/posts:(
          auth:jwt_required,
          validate:author_permissions,
          body:(
            title:string_required_min_5_max_200,
            content:text_required_min_100,
            excerpt:string_max_300,
            category:string_required,
            tags:array_strings,
            featuredImage:url_nullable,
            status:enum_draft_published_default_draft
          ),
          exec:(
            slug:generate_slug(body.title),
            post:db.posts.create({
              ...body,
              slug:slug,
              authorId:auth.userId,
              publishedAt:body.status=='published'?now():null
            }),
            audit:log_post_created(auth.userId, post.id),
            if:body.status=='published':[
              notifications:notify_subscribers(post.id),
              seo:generate_sitemap_entry(post)
            ]
          ),
          returns:post
        ),
        PUT:/posts/:id:(
          auth:jwt_required,
          validate:post_ownership_or_editor,
          body:post_updates,
          exec:(
            db.posts.update(params.id, body),
            audit:log_post_updated(auth.userId, params.id),
            if:body.status_changed_to_published:[
              notifications:notify_subscribers(params.id)
            ]
          ),
          returns:success
        ),
        DELETE:/posts/:id:(
          auth:jwt_required,
          validate:post_ownership_or_admin,
          exec:(
            db.posts.softDelete(params.id),
            db.comments.hideByPostId(params.id),
            audit:log_post_deleted(auth.userId, params.id)
          ),
          returns:success
        )
      ),
      comments:(
        GET:/posts/:postId/comments:(
          returns:db.comments.getByPostId(params.postId)
        ),
        POST:/posts/:postId/comments:(
          auth:jwt_required,
          body:(
            content:text_required_min_10_max_1000,
            parentId:uuid_nullable
          ),
          validate:(
            content:profanity_filter,
            rate_limit:5_per_hour
          ),
          exec:(
            comment:db.comments.create({
              postId:params.postId,
              userId:auth.userId,
              content:body.content,
              parentId:body.parentId
            }),
            notifications:notify_post_author(params.postId, comment.id)
          ),
          returns:comment
        )
      ),
      newsletter:(
        POST:/newsletter/subscribe:(
          body:(email:string_required_valid),
          validate:email_not_subscribed,
          exec:(
            subscription:db.newsletter.create({
              email:body.email,
              subscribedAt:now(),
              isActive:true
            }),
            email:send_welcome_email(body.email)
          ),
          returns:success
        )
      )
    ),
    database:(
      posts:(
        id:uuid_primary,
        title:string_required,
        slug:string_unique_required,
        content:text_required,
        excerpt:string_nullable,
        featuredImage:url_nullable,
        authorId:uuid_foreign_users,
        categoryId:uuid_foreign_categories,
        status:enum_draft_published_archived_default_draft,
        viewCount:integer_default_0,
        likeCount:integer_default_0,
        publishedAt:timestamp_nullable,
        createdAt:timestamp_auto,
        updatedAt:timestamp_auto
      ),
      categories:(
        id:uuid_primary,
        name:string_unique_required,
        slug:string_unique_required,
        description:text_nullable,
        color:string_default_blue,
        postCount:integer_default_0
      ),
      comments:(
        id:uuid_primary,
        postId:uuid_foreign_posts,
        userId:uuid_foreign_users,
        parentId:uuid_foreign_comments_nullable,
        content:text_required,
        isApproved:boolean_default_false,
        createdAt:timestamp_auto
      ),
      newsletter:(
        id:uuid_primary,
        email:string_unique_required,
        isActive:boolean_default_true,
        subscribedAt:timestamp_auto,
        unsubscribedAt:timestamp_nullable
      )
    ),
    security:(
      authentication:(
        jwt:(secret:env.JWT_SECRET, expiry:7d),
        sessions:(timeout:30d, maxConcurrent:3)
      ),
      authorization:(
        roles:[reader, author, editor, admin],
        permissions:(
          reader:[read:published_posts, create:comments],
          author:[read:all, write:own_posts, publish:own_posts],
          editor:[read:all, write:all, publish:all, moderate:comments],
          admin:[all]
        )
      ),
      rateLimit:(
        api_calls:1000_per_hour,
        comment_creation:5_per_hour,
        newsletter_signup:1_per_day
      )
    ),
    deployment:(
      frontend:(
        platform:vercel,
        build:next_build,
        env:(
          NEXT_PUBLIC_API_URL:env.API_URL,
          NEXT_PUBLIC_ANALYTICS_ID:env.ANALYTICS_ID
        )
      ),
      backend:(
        platform:railway,
        runtime:node18,
        env:(
          DATABASE_URL:env.DATABASE_URL,
          JWT_SECRET:env.JWT_SECRET,
          EMAIL_SERVICE_KEY:env.SENDGRID_KEY
        )
      ),
      database:(
        provider:postgresql,
        version:15,
        backup:(automated:daily, retention:30d)
      )
    )
  )
}