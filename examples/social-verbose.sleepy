// VERBOSE SOCIAL - "Have you tried turning it off and on again?"

{
  social$complete_social_network:(
    styles:(
      theme:(
        primary:#1da1f2,
        secondary:#14171a,
        accent:#1da1f2,
        success:#17bf63,
        danger:#e0245e,
        background:#ffffff,
        surface:#f7f9fa,
        text:#14171a,
        textSecondary:#657786
      ),
      layout:(
        sidebar:w-64_fixed_h-screen,
        main:flex-1_max-w-2xl_mx-auto,
        rightbar:w-80_fixed_right-0,
        mobile:responsive_stack
      ),
      components:(
        post$card:(
          bg:white,
          border:1px_solid_#e1e8ed,
          rounded:lg,
          p:4,
          hover:bg-gray-50,
          transition:all_200ms
        ),
        avatar:(
          rounded:full,
          border:2px_solid_white,
          shadow:md,
          &online:[border:2px_solid_success],
          &verified:[badge:checkmark]
        ),
        button$follow:(
          &following:[bg:primary, text:white, "Following"],
          &notFollowing:[bg:transparent, border:primary, text:primary, "Follow"]
        )
      )
    ),
    frontend:(
      layout$main:(
        sidebar$navigation:(
          column:[
            logo:(
              img:api.site.logo,
              h1:api.site.name
            ),
            nav$primary:(
              column:[
                link$nav:(
                  row:[icon:home, span:Home],
                  &active:[bg:primary, text:white]
                ),
                link$nav:(
                  row:[icon:search, span:Explore]
                ),
                link$nav:(
                  row:[icon:bell, span:Notifications],
                  if:api.notifications.unread>0:[
                    badge$count:api.notifications.unread
                  ]
                ),
                link$nav:(
                  row:[icon:mail, span:Messages],
                  if:api.messages.unread>0:[
                    badge$count:api.messages.unread
                  ]
                ),
                link$nav:(
                  row:[icon:bookmark, span:Bookmarks]
                ),
                link$nav:(
                  row:[icon:user, span:Profile]
                ),
                link$nav:(
                  row:[icon:settings, span:Settings]
                )
              ]
            ),
            button$post$primary:(
              text:Post,
              full-width:true,
              modal$compose:[
                textarea:(
                  placeholder:"What's happening?",
                  value:api.compose.content,
                  maxLength:280
                ),
                row$compose-actions:[
                  button$media:(icon:image),
                  button$gif:(icon:gif),
                  button$poll:(icon:poll),
                  button$emoji:(icon:emoji),
                  spacer,
                  span$char-count:api.compose.remaining,
                  button$post:(
                    text:Post,
                    disabled:api.compose.isEmpty
                  )
                ]
              ]
            ),
            spacer,
            dropdown$user:(
              trigger:(
                row:[
                  img$avatar:api.user.avatar,
                  column:[
                    span:api.user.displayName,
                    small:@api.user.username
                  ],
                  icon:chevron-down
                ]
              ),
              menu:(
                link:Switch_Account,
                link:Settings,
                divider,
                button:Sign_Out
              )
            )
          ]
        ),
        main$feed:(
          column:[
            header$feed:(
              row$space-between:[
                h1:Home,
                button$settings:(icon:settings)
              ],
              tabs$feed-tabs:(
                tab:(
                  label:For_You,
                  &active:true,
                  content:feed$algorithmic
                ),
                tab:(
                  label:Following,
                  content:feed$chronological
                )
              )
            ),
            compose$inline:(
              if:api.user.isLoggedIn:[
                row$compose:[
                  img$avatar:api.user.avatar,
                  column$compose-area:[
                    textarea:(
                      placeholder:"What's happening?",
                      value:api.compose.content,
                      autoResize:true
                    ),
                    if:api.compose.content.length>0:[
                      row$compose-options:[
                        button$visibility:(
                          icon:globe,
                          text:Everyone_can_reply
                        )
                      ],
                      row$compose-actions:[
                        button$media:(icon:image),
                        button$gif:(icon:gif),
                        button$poll:(icon:poll),
                        button$emoji:(icon:emoji),
                        spacer,
                        if:api.compose.remaining<20:[
                          circular-progress:(
                            value:api.compose.used,
                            max:280,
                            color:api.compose.remaining<0?danger:primary
                          )
                        ],
                        button$post:(
                          text:Post,
                          disabled:api.compose.isEmpty||api.compose.tooLong
                        )
                      ]
                    ]
                  ]
                ]
              ]
            ),
            feed$posts:(
              forEach:api.feed.posts:[
                post$card:(
                  row$post-header:[
                    img$avatar:item.author.avatar,
                    column$author-info:[
                      row:[
                        span$display-name:item.author.displayName,
                        if:item.author.isVerified:[
                          icon$verified:checkmark
                        ],
                        span$username:@item.author.username,
                        span$separator:·,
                        time:item.createdAt
                      ],
                      if:item.isRepost:[
                        small$repost-info:(
                          icon:repost,
                          span:item.reposter.displayName_reposted
                        )
                      ]
                    ],
                    spacer,
                    dropdown$post-menu:(
                      trigger:(icon:more),
                      menu:(
                        if:item.author.id==api.user.id:[
                          button:Edit,
                          button:Delete,
                          divider
                        ],
                        unless:item.author.id==api.user.id:[
                          button:Follow_@item.author.username,
                          button:Mute_@item.author.username,
                          button:Block_@item.author.username,
                          button:Report_Post,
                          divider
                        ],
                        button:Copy_Link,
                        button:Embed_Post
                      )
                    )
                  ],
                  if:item.isReply:[
                    row$reply-context:[
                      icon:reply,
                      span:Replying_to,
                      link:@item.replyTo.author.username
                    ]
                  ],
                  column$post-content:[
                    p$post-text:item.content,
                    if:item.media.length>0:[
                      grid$media:(
                        forEach:item.media:[
                          if:mediaItem.type=='image':[
                            img:(
                              src:mediaItem.url,
                              alt:mediaItem.altText,
                              rounded:lg,
                              modal$lightbox:true
                            )
                          ],
                          if:mediaItem.type=='video':[
                            video:(
                              src:mediaItem.url,
                              controls:true,
                              rounded:lg
                            )
                          ]
                        ]
                      )
                    ],
                    if:item.poll:[
                      poll$interactive:(
                        forEach:item.poll.options:[
                          row$poll-option:[
                            if:api.user.hasVoted:[
                              progress:(
                                value:pollOption.percentage,
                                label:pollOption.text_·_pollOption.percentage%
                              )
                            ],
                            unless:api.user.hasVoted:[
                              radio:(
                                name:poll-item.poll.id,
                                value:pollOption.id,
                                label:pollOption.text
                              )
                            ]
                          ]
                        ],
                        small$poll-meta:(
                          span:item.poll.totalVotes_votes,
                          span:·,
                          time:item.poll.endsAt
                        )
                      )
                    ],
                    if:item.quotedPost:[
                      card$quoted-post:(
                        row$quoted-header:[
                          img$avatar$small:item.quotedPost.author.avatar,
                          span$display-name:item.quotedPost.author.displayName,
                          span$username:@item.quotedPost.author.username,
                          span$separator:·,
                          time:item.quotedPost.createdAt
                        ],
                        p$quoted-content:item.quotedPost.content
                      )
                    ]
                  ],
                  row$post-actions:[
                    button$action:(
                      icon:reply,
                      span:item.replyCount,
                      modal$reply:[
                        post$original:item,
                        compose$reply:(
                          textarea:api.reply.content,
                          button$reply:Reply
                        )
                      ]
                    ),
                    button$action:(
                      icon:repost,
                      span:item.repostCount,
                      &isReposted:[icon:repost-filled, color:success],
                      dropdown$repost:[
                        button:Repost,
                        button:Quote_Post
                      ]
                    ),
                    button$action:(
                      icon:heart,
                      span:item.likeCount,
                      &isLiked:[icon:heart-filled, color:danger]
                    ),
                    button$action:(
                      icon:share,
                      dropdown$share:[
                        button:Copy_Link,
                        button:Share_via_DM,
                        button:Share_to_Story,
                        button:Bookmark
                      ]
                    )
                  ]
                )
              ]
            ),
            if:api.feed.hasMore:[
              button$load-more:Load_More_Posts
            ]
          ]
        ),
        aside$sidebar:(
          column:[
            search$widget:(
              input:(
                placeholder:Search,
                value:api.search.query,
                results:api.search.results
              )
            ),
            card$trends:(
              h3:What's_happening,
              forEach:api.trends.current:[
                row$trend:[
                  column:[
                    small:Trending_in_item.location,
                    h4:item.hashtag,
                    small:item.postCount_posts
                  ],
                  spacer,
                  button$trend-menu:(icon:more)
                ]
              ],
              link:Show_more
            ),
            card$suggestions:(
              h3:Who_to_follow,
              forEach:api.suggestions.users:[
                row$suggestion:[
                  img$avatar:item.avatar,
                  column:[
                    span$display-name:item.displayName,
                    small$username:@item.username,
                    small$reason:item.reason
                  ],
                  spacer,
                  button$follow:Follow
                ]
              ],
              link:Show_more
            ),
            card$footer:(
              row$links:[
                link:Terms,
                link:Privacy,
                link:Ads,
                link:More
              ],
              small:©_2024_api.site.name
            )
          ]
        )
      ),
      profile$page:(
        header$profile:(
          img$cover:api.profile.coverImage,
          container:(
            row$profile-header:[
              img$avatar$large:api.profile.avatar,
              spacer,
              row$profile-actions:[
                if:api.profile.isOwnProfile:[
                  button:Edit_Profile
                ],
                unless:api.profile.isOwnProfile:[
                  button$follow:(
                    &isFollowing:Following,
                    &notFollowing:Follow
                  ),
                  button$message:Message,
                  dropdown$more:[
                    button:Mute,
                    button:Block,
                    button:Report
                  ]
                ]
              ]
            ],
            column$profile-info:[
              h1:api.profile.displayName,
              p$username:@api.profile.username,
              p$bio:api.profile.bio,
              row$profile-meta:[
                if:api.profile.location:[
                  span:(icon:location, api.profile.location)
                ],
                if:api.profile.website:[
                  link:(icon:link, api.profile.website)
                ],
                span:(icon:calendar, Joined_api.profile.joinDate)
              ],
              row$profile-stats:[
                link:(
                  span$count:api.profile.followingCount,
                  span:Following
                ),
                link:(
                  span$count:api.profile.followerCount,
                  span:Followers
                )
              ]
            ]
          )
        ),
        tabs$profile-tabs:(
          tab:(
            label:Posts,
            content:feed$user-posts
          ),
          tab:(
            label:Replies,
            content:feed$user-replies
          ),
          tab:(
            label:Media,
            content:feed$user-media
          ),
          tab:(
            label:Likes,
            content:feed$user-likes
          )
        )
      ),
      messages$page:(
        row$messages-layout:[
          sidebar$conversations:(
            header:(
              h2:Messages,
              button$new-message:(icon:plus)
            ),
            search:(
              input:Search_messages
            ),
            list$conversations:(
              forEach:api.messages.conversations:[
                row$conversation:(
                  img$avatar:item.participant.avatar,
                  column:[
                    span$name:item.participant.displayName,
                    p$preview:item.lastMessage.preview
                  ],
                  column$meta:[
                    time:item.lastMessage.timestamp,
                    if:item.unreadCount>0:[
                      badge$unread:item.unreadCount
                    ]
                  ],
                  &active:[bg:primary, text:white]
                )
              ]
            )
          ),
          main$chat:(
            if:api.messages.selectedConversation:[
              header$chat:(
                row:[
                  img$avatar:api.messages.selectedConversation.participant.avatar,
                  h3:api.messages.selectedConversation.participant.displayName,
                  spacer,
                  button$info:(icon:info)
                ]
              ),
              section$messages:(
                forEach:api.messages.selectedConversation.messages:[
                  row$message:(
                    if:item.senderId==api.user.id:[
                      spacer,
                      bubble$sent:(
                        p:item.content,
                        small:item.timestamp
                      )
                    ],
                    unless:item.senderId==api.user.id:[
                      bubble$received:(
                        p:item.content,
                        small:item.timestamp
                      ),
                      spacer
                    ]
                  )
                ]
              ),
              footer$compose:(
                row$message-input:[
                  button$emoji:(icon:emoji),
                  input:(
                    placeholder:Start_a_new_message,
                    value:api.messages.compose.content
                  ),
                  button$send:(
                    icon:send,
                    disabled:api.messages.compose.isEmpty
                  )
                ]
              )
            ],
            unless:api.messages.selectedConversation:[
              placeholder$no-conversation:(
                h3:Select_a_conversation,
                p:Choose_from_existing_conversations_or_start_a_new_one
              )
            ]
          ]
        ]
      )
    ),
    api:(
      posts:(
        GET:/feed:(
          auth:required,
          query:(
            algorithm:enum_chronological_algorithmic_default_algorithmic,
            limit:int_default_20,
            cursor:string_nullable
          ),
          exec:(
            if:query.algorithm=='chronological':[
              posts:db.posts.getChronologicalFeed(auth.userId, query)
            ],
            unless:query.algorithm=='chronological':[
              posts:ai.generateAlgorithmicFeed(auth.userId, query)
            ],
            analytics:track_feed_view(auth.userId, query.algorithm)
          ),
          returns:(
            posts:posts,
            nextCursor:generate_cursor(posts),
            hasMore:posts.length==query.limit
          )
        ),
        POST:/posts:(
          auth:required,
          body:(
            content:string_required_max_280,
            media:array_max_4,
            poll:object_nullable,
            replyToId:uuid_nullable,
            quotePostId:uuid_nullable,
            visibility:enum_public_followers_private_default_public
          ),
          validate:(
            content:profanity_filter,
            media:valid_formats,
            rate_limit:10_posts_per_hour
          ),
          exec:(
            post:db.posts.create({
              authorId:auth.userId,
              content:body.content,
              media:body.media,
              poll:body.poll,
              replyToId:body.replyToId,
              quotePostId:body.quotePostId,
              visibility:body.visibility
            }),
            if:body.replyToId:[
              notification:notify_reply(body.replyToId, post.id)
            ],
            if:body.quotePostId:[
              notification:notify_quote(body.quotePostId, post.id)
            ],
            mentions:extract_mentions(body.content),
            forEach:mentions:[
              notification:notify_mention(mention.userId, post.id)
            ],
            hashtags:extract_hashtags(body.content),
            db.hashtags.updateTrends(hashtags),
            analytics:track_post_created(auth.userId, post.id)
          ),
          returns:post
        ),
        POST:/posts/:id/like:(
          auth:required,
          validate:post_exists,
          exec:(
            existing:db.likes.findByUserAndPost(auth.userId, params.id),
            if:existing:[
              db.likes.delete(existing.id),
              db.posts.decrementLikes(params.id),
              action:unliked
            ],
            unless:existing:[
              like:db.likes.create({
                userId:auth.userId,
                postId:params.id
              }),
              db.posts.incrementLikes(params.id),
              notification:notify_like(params.id, auth.userId),
              action:liked
            ]
          ),
          returns:(
            action:action,
            newCount:db.posts.getLikeCount(params.id)
          )
        ),
        POST:/posts/:id/repost:(
          auth:required,
          validate:post_exists,
          body:(
            type:enum_simple_quote_required,
            content:string_nullable
          ),
          exec:(
            if:body.type=='simple':[
              repost:db.reposts.create({
                userId:auth.userId,
                originalPostId:params.id
              }),
              db.posts.incrementReposts(params.id)
            ],
            if:body.type=='quote':[
              repost:db.posts.create({
                authorId:auth.userId,
                content:body.content,
                quotePostId:params.id
              })
            ],
            notification:notify_repost(params.id, auth.userId)
          ),
          returns:repost
        )
      ),
      users:(
        GET:/users/:username:(
          returns:(
            user:db.users.findByUsernameWithProfile(params.username),
            stats:db.users.getStats(user.id),
            relationship:db.follows.getRelationship(auth.userId, user.id)
          )
        ),
        POST:/users/:id/follow:(
          auth:required,
          validate:user_exists_not_self,
          exec:(
            existing:db.follows.findByFollowerAndFollowing(auth.userId, params.id),
            if:existing:[
              db.follows.delete(existing.id),
              db.users.decrementFollowers(params.id),
              db.users.decrementFollowing(auth.userId),
              action:unfollowed
            ],
            unless:existing:[
              follow:db.follows.create({
                followerId:auth.userId,
                followingId:params.id
              }),
              db.users.incrementFollowers(params.id),
              db.users.incrementFollowing(auth.userId),
              notification:notify_follow(params.id, auth.userId),
              action:followed
            ]
          ),
          returns:action
        )
      ),
      messages:(
        GET:/conversations:(
          auth:required,
          returns:db.conversations.getByUserId(auth.userId)
        ),
        GET:/conversations/:id/messages:(
          auth:required,
          validate:conversation_access,
          query:(
            limit:int_default_50,
            before:timestamp_nullable
          ),
          exec:(
            messages:db.messages.getByConversationId(params.id, query),
            db.messages.markAsRead(params.id, auth.userId)
          ),
          returns:messages
        ),
        POST:/conversations/:id/messages:(
          auth:required,
          validate:conversation_access,
          body:(content:string_required_max_1000),
          exec:(
            message:db.messages.create({
              conversationId:params.id,
              senderId:auth.userId,
              content:body.content
            }),
            db.conversations.updateLastMessage(params.id, message.id),
            participants:db.conversations.getParticipants(params.id),
            forEach:participants:[
              if:participant.id!=auth.userId:[
                notification:notify_message(participant.id, message.id),
                realtime:send_message_update(participant.id, message)
              ]
            ]
          ),
          returns:message
        )
      ),
      search:(
        GET:/search:(
          auth:required,
          query:(
            q:string_required_min_3,
            type:enum_posts_users_hashtags_default_posts,
            limit:int_default_20
          ),
          exec:(
            if:query.type=='posts':[
              results:db.posts.search(query.q, query.limit)
            ],
            if:query.type=='users':[
              results:db.users.search(query.q, query.limit)
            ],
            if:query.type=='hashtags':[
              results:db.hashtags.search(query.q, query.limit)
            ],
            analytics:track_search(auth.userId, query.q, query.type)
          ),
          returns:results
        )
      )
    ),
    database:(
      users:(
        id:uuid_primary,
        username:string_unique_required,
        email:string_unique_required,
        displayName:string_required,
        bio:text_nullable,
        avatar:url_nullable,
        coverImage:url_nullable,
        location:string_nullable,
        website:url_nullable,
        isVerified:boolean_default_false,
        isPrivate:boolean_default_false,
        followerCount:integer_default_0,
        followingCount:integer_default_0,
        postCount:integer_default_0,
        joinedAt:timestamp_auto,
        lastActiveAt:timestamp_nullable
      ),
      posts:(
        id:uuid_primary,
        authorId:uuid_foreign_users,
        content:string_required,
        media:json_array_nullable,
        poll:json_nullable,
        replyToId:uuid_foreign_posts_nullable,
        quotePostId:uuid_foreign_posts_nullable,
        visibility:enum_public_followers_private_default_public,
        likeCount:integer_default_0,
        repostCount:integer_default_0,
        replyCount:integer_default_0,
        viewCount:integer_default_0,
        createdAt:timestamp_auto,
        editedAt:timestamp_nullable
      ),
      follows:(
        id:uuid_primary,
        followerId:uuid_foreign_users,
        followingId:uuid_foreign_users,
        createdAt:timestamp_auto,
        unique:[followerId, followingId]
      ),
      likes:(
        id:uuid_primary,
        userId:uuid_foreign_users,
        postId:uuid_foreign_posts,
        createdAt:timestamp_auto,
        unique:[userId, postId]
      ),
      conversations:(
        id:uuid_primary,
        type:enum_direct_group_default_direct,
        name:string_nullable,
        lastMessageId:uuid_foreign_messages_nullable,
        lastActivityAt:timestamp_auto,
        createdAt:timestamp_auto
      ),
      messages:(
        id:uuid_primary,
        conversationId:uuid_foreign_conversations,
        senderId:uuid_foreign_users,
        content:text_required,
        media:json_array_nullable,
        readBy:json_array_default_empty,
        createdAt:timestamp_auto,
        editedAt:timestamp_nullable
      ),
      notifications:(
        id:uuid_primary,
        userId:uuid_foreign_users,
        type:enum_like_repost_reply_follow_mention_message,
        actorId:uuid_foreign_users_nullable,
        targetId:uuid_nullable,
        isRead:boolean_default_false,
        createdAt:timestamp_auto
      )
    ),
    realtime:(
      websockets:(
        events:[
          new_post,
          post_liked,
          post_reposted,
          new_follower,
          new_message,
          typing_indicator,
          user_online,
          user_offline
        ],
        authentication:jwt_token,
        rooms:[
          user_feed:user_${userId},
          conversation:conversation_${conversationId},
          notifications:notifications_${userId}
        ]
      )
    ),
    security:(
      authentication:(
        jwt:(secret:env.JWT_SECRET, expiry:30d),
        oauth:[google, twitter, apple],
        twoFactor:optional
      ),
      authorization:(
        roles:[user, moderator, admin],
        permissions:(
          user:[read:public_posts, write:own_posts, follow:users],
          moderator:[read:all, moderate:posts, moderate:users],
          admin:[all]
        )
      ),
      contentModeration:(
        profanityFilter:enabled,
        spamDetection:ai_powered,
        harassment:automatic_detection,
        reportSystem:user_driven
      ),
      privacy:(
        dataRetention:2_years,
        userDeletion:complete_within_30d,
        dataExport:available_on_request
      )
    ),
    deployment:(
      frontend:(
        platform:vercel,
        framework:nextjs,
        features:[ssr, real_time_updates]
      ),
      backend:(
        platform:railway,
        runtime:node18,
        scaling:(min:5, max:50),
        cache:redis,
        queue:bull
      ),
      database:(
        provider:postgresql,
        version:15,
        read_replicas:3,
        sharding:by_user_id
      ),
      realtime:(
        provider:pusher,
        fallback:websockets,
        scaling:auto
      )
    )
  )
}