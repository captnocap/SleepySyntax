// VERBOSE AUTH - "No legal liability, no recommendations, no responsibility"

{
  auth$enterprise_authentication_system:(
    styles:(
      theme:(
        primary:#4f46e5,
        secondary:#6b7280,
        success:#10b981,
        warning:#f59e0b,
        danger:#ef4444,
        background:#f9fafb,
        surface:#ffffff,
        text:#111827,
        textSecondary:#6b7280
      ),
      layout:(
        container:max-w-md_mx-auto_px-6_py-12,
        card:bg-white_shadow-lg_rounded-xl_p-8,
        form:space-y-6
      ),
      components:(
        input:(
          w-full_px-3_py-2,
          border:1px_solid_#d1d5db,
          rounded:md,
          focus:border-primary,
          focus:ring-1_ring-primary
        ),
        button$primary:(
          w-full_px-4_py-2,
          bg:primary,
          text:white,
          rounded:md,
          hover:bg-primary-dark,
          disabled:opacity-50
        ),
        alert:(
          p:4,
          rounded:md,
          &success:[bg:success-light, text:success-dark],
          &error:[bg:danger-light, text:danger-dark],
          &warning:[bg:warning-light, text:warning-dark]
        )
      )
    ),
    frontend:(
      pages:(
        login:(
          container:(
            card$auth:(
              column:[
                header$auth:(
                  img$logo:api.branding.logo,
                  h1:Sign_In,
                  p:Access_your_account
                ),
                if:api.auth.error:[
                  alert$error:api.auth.errorMessage
                ],
                form$login:(
                  column:[
                    field$email:(
                      label:Email_Address,
                      input_email:(
                        placeholder:Enter_your_email,
                        value:api.auth.email,
                        required:true,
                        autoComplete:email
                      ),
                      if:api.validation.email.hasError:[
                        small$error:api.validation.email.message
                      ]
                    ),
                    field$password:(
                      label:Password,
                      input_password:(
                        placeholder:Enter_your_password,
                        value:api.auth.password,
                        required:true,
                        autoComplete:current-password
                      ),
                      if:api.validation.password.hasError:[
                        small$error:api.validation.password.message
                      ]
                    ),
                    row$options:(
                      checkbox$remember:(
                        input:api.auth.rememberMe,
                        label:Remember_me
                      ),
                      spacer,
                      link$forgot:Forgot_password?
                    ),
                    button$primary:(
                      text:Sign_In,
                      loading:api.auth.isLoading,
                      disabled:api.auth.isLoading||!api.validation.isValid
                    )
                  ]
                ),
                divider$or:or,
                section$oauth:(
                  column:[
                    button$oauth$google:(
                      row:[
                        icon:google,
                        span:Continue_with_Google
                      ]
                    ),
                    button$oauth$github:(
                      row:[
                        icon:github,
                        span:Continue_with_GitHub
                      ]
                    ),
                    button$oauth$microsoft:(
                      row:[
                        icon:microsoft,
                        span:Continue_with_Microsoft
                      ]
                    )
                  ]
                ),
                footer$auth:(
                  p:(
                    span:Don't_have_an_account?,
                    link:Sign_up_here
                  )
                )
              ]
            )
          )
        ),
        signup:(
          container:(
            card$auth:(
              column:[
                header$auth:(
                  img$logo:api.branding.logo,
                  h1:Create_Account,
                  p:Join_thousands_of_users
                ),
                if:api.auth.error:[
                  alert$error:api.auth.errorMessage
                ],
                form$signup:(
                  column:[
                    row$name-fields:[
                      field$first-name:(
                        label:First_Name,
                        input:(
                          placeholder:First_name,
                          value:api.auth.firstName,
                          required:true,
                          autoComplete:given-name
                        )
                      ),
                      field$last-name:(
                        label:Last_Name,
                        input:(
                          placeholder:Last_name,
                          value:api.auth.lastName,
                          required:true,
                          autoComplete:family-name
                        )
                      )
                    ],
                    field$email:(
                      label:Email_Address,
                      input_email:(
                        placeholder:Enter_your_email,
                        value:api.auth.email,
                        required:true,
                        autoComplete:email
                      ),
                      if:api.validation.email.hasError:[
                        small$error:api.validation.email.message
                      ],
                      if:api.validation.email.isValid:[
                        small$success:Email_is_available
                      ]
                    ),
                    field$password:(
                      label:Password,
                      input_password:(
                        placeholder:Create_a_strong_password,
                        value:api.auth.password,
                        required:true,
                        autoComplete:new-password
                      ),
                      progress$strength:(
                        value:api.validation.password.strength,
                        color:api.validation.password.strengthColor,
                        label:api.validation.password.strengthLabel
                      ),
                      if:api.validation.password.requirements:[
                        list$requirements:(
                          forEach:api.validation.password.requirements:[
                            li:(
                              icon:(
                                &met:[check, color:success],
                                &unmet:[x, color:danger]
                              ),
                              span:item.text,
                              &met:[color:success],
                              &unmet:[color:danger]
                            )
                          ]
                        )
                      ]
                    ),
                    field$confirm-password:(
                      label:Confirm_Password,
                      input_password:(
                        placeholder:Confirm_your_password,
                        value:api.auth.confirmPassword,
                        required:true,
                        autoComplete:new-password
                      ),
                      if:api.validation.confirmPassword.hasError:[
                        small$error:api.validation.confirmPassword.message
                      ]
                    ),
                    field$terms:(
                      checkbox$terms:(
                        input:api.auth.acceptTerms,
                        label:(
                          span:I_agree_to_the,
                          link:Terms_of_Service,
                          span:and,
                          link:Privacy_Policy
                        ),
                        required:true
                      )
                    ),
                    button$primary:(
                      text:Create_Account,
                      loading:api.auth.isLoading,
                      disabled:api.auth.isLoading||!api.validation.isValid
                    )
                  ]
                ),
                footer$auth:(
                  p:(
                    span:Already_have_an_account?,
                    link:Sign_in_here
                  )
                )
              ]
            )
          )
        ),
        forgot_password:(
          container:(
            card$auth:(
              column:[
                header$auth:(
                  img$logo:api.branding.logo,
                  h1:Reset_Password,
                  p:We'll_send_you_reset_instructions
                ),
                if:api.auth.success:[
                  alert$success:(
                    h4:Check_your_email,
                    p:We_sent_reset_instructions_to_api.auth.email
                  )
                ],
                unless:api.auth.success:[
                  form$forgot:(
                    column:[
                      field$email:(
                        label:Email_Address,
                        input_email:(
                          placeholder:Enter_your_email,
                          value:api.auth.email,
                          required:true,
                          autoComplete:email
                        )
                      ),
                      button$primary:(
                        text:Send_Reset_Link,
                        loading:api.auth.isLoading,
                        disabled:api.auth.isLoading||!api.auth.email
                      )
                    ]
                  )
                ],
                footer$auth:(
                  p:(
                    link:Back_to_sign_in
                  )
                )
              ]
            )
          )
        ),
        reset_password:(
          container:(
            card$auth:(
              column:[
                header$auth:(
                  img$logo:api.branding.logo,
                  h1:Set_New_Password,
                  p:Choose_a_strong_password
                ),
                if:api.auth.error:[
                  alert$error:api.auth.errorMessage
                ],
                if:api.auth.success:[
                  alert$success:(
                    h4:Password_Updated,
                    p:You_can_now_sign_in_with_your_new_password,
                    button$primary:Sign_In
                  )
                ],
                unless:api.auth.success:[
                  form$reset:(
                    column:[
                      field$password:(
                        label:New_Password,
                        input_password:(
                          placeholder:Enter_new_password,
                          value:api.auth.password,
                          required:true,
                          autoComplete:new-password
                        ),
                        progress$strength:(
                          value:api.validation.password.strength,
                          label:api.validation.password.strengthLabel
                        )
                      ),
                      field$confirm-password:(
                        label:Confirm_Password,
                        input_password:(
                          placeholder:Confirm_new_password,
                          value:api.auth.confirmPassword,
                          required:true,
                          autoComplete:new-password
                        )
                      ),
                      button$primary:(
                        text:Update_Password,
                        loading:api.auth.isLoading,
                        disabled:api.auth.isLoading||!api.validation.isValid
                      )
                    ]
                  )
                ]
              ]
            )
          )
        ),
        two_factor:(
          container:(
            card$auth:(
              column:[
                header$auth:(
                  img$logo:api.branding.logo,
                  h1:Two-Factor_Authentication,
                  p:Enter_the_code_from_your_authenticator_app
                ),
                if:api.auth.error:[
                  alert$error:api.auth.errorMessage
                ],
                form$2fa:(
                  column:[
                    field$code:(
                      label:Verification_Code,
                      input$otp:(
                        length:6,
                        value:api.auth.code,
                        autoComplete:one-time-code,
                        autoFocus:true
                      )
                    ),
                    button$primary:(
                      text:Verify,
                      loading:api.auth.isLoading,
                      disabled:api.auth.isLoading||api.auth.code.length<6
                    ),
                    row$2fa-options:[
                      button$secondary:(
                        text:Use_backup_code
                      ),
                      button$secondary:(
                        text:Resend_SMS
                      )
                    ]
                  ]
                ),
                footer$auth:(
                  p:(
                    link:Back_to_login
                  )
                )
              ]
            )
          )
        ),
        verify_email:(
          container:(
            card$auth:(
              column:[
                header$auth:(
                  img$logo:api.branding.logo,
                  h1:Verify_Your_Email,
                  p:We_sent_a_verification_link_to_api.auth.email
                ),
                if:api.auth.success:[
                  alert$success:(
                    h4:Email_Verified!,
                    p:Your_account_is_now_active,
                    button$primary:Continue_to_Dashboard
                  )
                ],
                unless:api.auth.success:[
                  section$verify:(
                    column:[
                      icon$email:(
                        name:mail,
                        size:lg,
                        color:primary
                      ),
                      p:Click_the_link_in_your_email_to_verify_your_account,
                      small:Didn't_receive_an_email?_Check_your_spam_folder,
                      button$secondary:(
                        text:Resend_verification_email,
                        loading:api.auth.isResending
                      )
                    ]
                  )
                ]
              ]
            )
          )
        )
      )
    ),
    api:(
      auth:(
        POST:/auth/login:(
          body:(
            email:string_required_email,
            password:string_required_min_8,
            rememberMe:boolean_default_false,
            deviceInfo:object_nullable
          ),
          validate:(
            email:email_format,
            password:not_empty,
            rate_limit:5_attempts_per_15min_by_ip
          ),
          exec:(
            user:db.users.findByEmail(body.email),
            if:!user:[
              audit:log_failed_login_attempt(body.email, request.ip, 'user_not_found'),
              delay:random_delay(500, 1500),
              returns:error.invalid_credentials
            ],
            if:user.isLocked:[
              audit:log_failed_login_attempt(body.email, request.ip, 'account_locked'),
              returns:error.account_locked
            ],
            passwordValid:bcrypt.compare(body.password, user.passwordHash),
            if:!passwordValid:[
              db.users.incrementFailedAttempts(user.id),
              if:user.failedAttempts >= 4:[
                db.users.lockAccount(user.id, 30_minutes)
              ],
              audit:log_failed_login_attempt(user.id, request.ip, 'invalid_password'),
              returns:error.invalid_credentials
            ],
            db.users.resetFailedAttempts(user.id),
            db.users.updateLastLogin(user.id, request.ip),
            if:user.twoFactorEnabled:[
              tempToken:jwt.sign({
                userId:user.id,
                type:'2fa_pending',
                exp:add_minutes(now(), 10)
              }),
              audit:log_2fa_challenge_sent(user.id),
              returns:(
                requiresTwoFactor:true,
                tempToken:tempToken
              )
            ],
            session:db.sessions.create({
              userId:user.id,
              deviceInfo:body.deviceInfo,
              ipAddress:request.ip,
              userAgent:request.userAgent,
              expiresAt:body.rememberMe ? add_days(now(), 30) : add_hours(now(), 8)
            }),
            accessToken:jwt.sign({
              userId:user.id,
              sessionId:session.id,
              role:user.role,
              permissions:user.permissions
            }),
            refreshToken:jwt.sign({
              sessionId:session.id,
              type:'refresh'
            }),
            audit:log_successful_login(user.id, session.id)
          ),
          returns:(
            accessToken:accessToken,
            refreshToken:refreshToken,
            user:user.safeProfile,
            expiresAt:session.expiresAt
          )
        ),
        POST:/auth/signup:(
          body:(
            firstName:string_required_min_2_max_50,
            lastName:string_required_min_2_max_50,
            email:string_required_email,
            password:string_required_min_8,
            acceptTerms:boolean_required_true
          ),
          validate:(
            email:(
              format:valid_email,
              unique:db.users.emailExists(body.email),
              domain:allowed_domains
            ),
            password:(
              strength:minimum_medium,
              not_common:not_in_common_passwords,
              not_personal:not_contains_name_or_email
            ),
            rate_limit:3_signups_per_hour_by_ip
          ),
          exec:(
            passwordHash:bcrypt.hash(body.password, 12),
            user:db.users.create({
              firstName:body.firstName,
              lastName:body.lastName,
              email:body.email,
              passwordHash:passwordHash,
              emailVerified:false,
              role:'user',
              isActive:true,
              acceptedTermsAt:now()
            }),
            verificationToken:crypto.randomBytes(32).toString('hex'),
            db.email_verifications.create({
              userId:user.id,
              token:verificationToken,
              expiresAt:add_hours(now(), 24)
            }),
            email:email.sendVerification({
              to:user.email,
              name:user.firstName,
              verificationUrl:`${env.FRONTEND_URL}/verify-email?token=${verificationToken}`
            }),
            audit:log_user_registered(user.id),
            analytics:track_signup(user.id, request.source)
          ),
          returns:(
            user:user.safeProfile,
            message:'Account_created_successfully._Please_check_your_email_to_verify_your_account.'
          )
        ),
        POST:/auth/forgot-password:(
          body:(
            email:string_required_email
          ),
          validate:(
            rate_limit:3_requests_per_hour_by_ip
          ),
          exec:(
            user:db.users.findByEmail(body.email),
            if:user:[
              resetToken:crypto.randomBytes(32).toString('hex'),
              db.password_resets.create({
                userId:user.id,
                token:resetToken,
                expiresAt:add_hours(now(), 1)
              }),
              email:email.sendPasswordReset({
                to:user.email,
                name:user.firstName,
                resetUrl:`${env.FRONTEND_URL}/reset-password?token=${resetToken}`
              }),
              audit:log_password_reset_requested(user.id)
            ],
            delay:random_delay(500, 1500)
          ),
          returns:(
            message:'If_an_account_with_that_email_exists,_we_sent_password_reset_instructions.'
          )
        ),
        POST:/auth/reset-password:(
          body:(
            token:string_required,
            password:string_required_min_8
          ),
          validate:(
            password:(
              strength:minimum_medium,
              not_common:not_in_common_passwords
            ),
            rate_limit:5_attempts_per_hour_by_ip
          ),
          exec:(
            reset:db.password_resets.findValidToken(body.token),
            if:!reset:[
              returns:error.invalid_or_expired_token
            ],
            user:db.users.findById(reset.userId),
            passwordHash:bcrypt.hash(body.password, 12),
            db.users.update(user.id, {
              passwordHash:passwordHash,
              passwordChangedAt:now(),
              failedAttempts:0,
              isLocked:false
            }),
            db.password_resets.invalidateForUser(user.id),
            db.sessions.invalidateAllForUser(user.id),
            email:email.sendPasswordChanged({
              to:user.email,
              name:user.firstName
            }),
            audit:log_password_reset_completed(user.id)
          ),
          returns:(
            message:'Password_updated_successfully._Please_sign_in_with_your_new_password.'
          )
        ),
        POST:/auth/verify-email:(
          body:(
            token:string_required
          ),
          exec:(
            verification:db.email_verifications.findValidToken(body.token),
            if:!verification:[
              returns:error.invalid_or_expired_token
            ],
            user:db.users.findById(verification.userId),
            db.users.update(user.id, {
              emailVerified:true,
              emailVerifiedAt:now()
            }),
            db.email_verifications.markAsUsed(verification.id),
            email:email.sendWelcome({
              to:user.email,
              name:user.firstName
            }),
            audit:log_email_verified(user.id)
          ),
          returns:(
            user:user.safeProfile,
            message:'Email_verified_successfully!'
          )
        ),
        POST:/auth/verify-2fa:(
          auth:temp_token_required,
          body:(
            code:string_required_length_6
          ),
          validate:(
            rate_limit:5_attempts_per_15min_by_user
          ),
          exec:(
            user:db.users.findById(auth.userId),
            codeValid:totp.verify(body.code, user.twoFactorSecret),
            if:!codeValid:[
              audit:log_2fa_failed_attempt(user.id),
              returns:error.invalid_2fa_code
            ],
            session:db.sessions.create({
              userId:user.id,
              deviceInfo:request.deviceInfo,
              ipAddress:request.ip,
              userAgent:request.userAgent,
              expiresAt:add_hours(now(), 8)
            }),
            accessToken:jwt.sign({
              userId:user.id,
              sessionId:session.id,
              role:user.role,
              permissions:user.permissions
            }),
            refreshToken:jwt.sign({
              sessionId:session.id,
              type:'refresh'
            }),
            audit:log_2fa_verified(user.id, session.id)
          ),
          returns:(
            accessToken:accessToken,
            refreshToken:refreshToken,
            user:user.safeProfile
          )
        ),
        POST:/auth/refresh:(
          body:(
            refreshToken:string_required
          ),
          exec:(
            token:jwt.verify(body.refreshToken),
            session:db.sessions.findActiveById(token.sessionId),
            if:!session:[
              returns:error.invalid_session
            ],
            user:db.users.findById(session.userId),
            newAccessToken:jwt.sign({
              userId:user.id,
              sessionId:session.id,
              role:user.role,
              permissions:user.permissions
            }),
            db.sessions.updateLastUsed(session.id)
          ),
          returns:(
            accessToken:newAccessToken,
            user:user.safeProfile
          )
        ),
        POST:/auth/logout:(
          auth:required,
          exec:(
            db.sessions.invalidate(auth.sessionId),
            audit:log_logout(auth.userId, auth.sessionId)
          ),
          returns:(
            message:'Logged_out_successfully'
          )
        ),
        POST:/auth/logout-all:(
          auth:required,
          exec:(
            db.sessions.invalidateAllForUser(auth.userId),
            audit:log_logout_all_devices(auth.userId)
          ),
          returns:(
            message:'Logged_out_from_all_devices'
          )
        )
      ),
      oauth:(
        GET:/auth/oauth/:provider:(
          validate:(
            provider:enum_google_github_microsoft_apple
          ),
          exec:(
            state:crypto.randomBytes(16).toString('hex'),
            redirectUrl:oauth.getAuthUrl(params.provider, state),
            db.oauth_states.create({
              state:state,
              provider:params.provider,
              expiresAt:add_minutes(now(), 10)
            })
          ),
          returns:(
            redirectUrl:redirectUrl
          )
        ),
        GET:/auth/oauth/:provider/callback:(
          query:(
            code:string_required,
            state:string_required
          ),
          exec:(
            stateRecord:db.oauth_states.findValid(query.state),
            if:!stateRecord:[
              returns:error.invalid_oauth_state
            ],
            tokens:oauth.exchangeCodeForTokens(params.provider, query.code),
            profile:oauth.getUserProfile(params.provider, tokens.accessToken),
            user:db.users.findByEmail(profile.email),
            if:user:[
              db.oauth_accounts.upsert({
                userId:user.id,
                provider:params.provider,
                providerId:profile.id,
                accessToken:tokens.accessToken,
                refreshToken:tokens.refreshToken
              }),
              action:'login'
            ],
            unless:user:[
              user:db.users.create({
                firstName:profile.firstName,
                lastName:profile.lastName,
                email:profile.email,
                avatar:profile.avatar,
                emailVerified:profile.emailVerified,
                role:'user',
                isActive:true,
                oauthProvider:params.provider
              }),
              db.oauth_accounts.create({
                userId:user.id,
                provider:params.provider,
                providerId:profile.id,
                accessToken:tokens.accessToken,
                refreshToken:tokens.refreshToken
              }),
              action:'signup'
            ],
            session:db.sessions.create({
              userId:user.id,
              deviceInfo:request.deviceInfo,
              ipAddress:request.ip,
              userAgent:request.userAgent,
              expiresAt:add_hours(now(), 8)
            }),
            accessToken:jwt.sign({
              userId:user.id,
              sessionId:session.id,
              role:user.role,
              permissions:user.permissions
            }),
            refreshToken:jwt.sign({
              sessionId:session.id,
              type:'refresh'
            }),
            audit:log_oauth_login(user.id, params.provider, action)
          ),
          returns:(
            accessToken:accessToken,
            refreshToken:refreshToken,
            user:user.safeProfile,
            action:action
          )
        )
      )
    ),
    database:(
      users:(
        id:uuid_primary,
        firstName:string_required,
        lastName:string_required,
        email:string_unique_required,
        passwordHash:string_nullable,
        avatar:url_nullable,
        role:enum_user_admin_moderator_default_user,
        isActive:boolean_default_true,
        isLocked:boolean_default_false,
        emailVerified:boolean_default_false,
        emailVerifiedAt:timestamp_nullable,
        twoFactorEnabled:boolean_default_false,
        twoFactorSecret:string_nullable,
        failedAttempts:integer_default_0,
        lastFailedAttempt:timestamp_nullable,
        lastLoginAt:timestamp_nullable,
        lastLoginIp:string_nullable,
        passwordChangedAt:timestamp_nullable,
        acceptedTermsAt:timestamp_nullable,
        createdAt:timestamp_auto,
        updatedAt:timestamp_auto
      ),
      sessions:(
        id:uuid_primary,
        userId:uuid_foreign_users,
        deviceInfo:json_nullable,
        ipAddress:string_required,
        userAgent:string_nullable,
        isActive:boolean_default_true,
        lastUsedAt:timestamp_auto,
        expiresAt:timestamp_required,
        createdAt:timestamp_auto
      ),
      email_verifications:(
        id:uuid_primary,
        userId:uuid_foreign_users,
        token:string_unique_required,
        isUsed:boolean_default_false,
        usedAt:timestamp_nullable,
        expiresAt:timestamp_required,
        createdAt:timestamp_auto
      ),
      password_resets:(
        id:uuid_primary,
        userId:uuid_foreign_users,
        token:string_unique_required,
        isUsed:boolean_default_false,
        usedAt:timestamp_nullable,
        expiresAt:timestamp_required,
        createdAt:timestamp_auto
      ),
      oauth_accounts:(
        id:uuid_primary,
        userId:uuid_foreign_users,
        provider:enum_google_github_microsoft_apple,
        providerId:string_required,
        accessToken:string_encrypted_required,
        refreshToken:string_encrypted_nullable,
        tokenExpiresAt:timestamp_nullable,
        createdAt:timestamp_auto,
        updatedAt:timestamp_auto,
        unique:[provider, providerId]
      ),
      oauth_states:(
        id:uuid_primary,
        state:string_unique_required,
        provider:string_required,
        isUsed:boolean_default_false,
        expiresAt:timestamp_required,
        createdAt:timestamp_auto
      ),
      audit_logs:(
        id:uuid_primary,
        userId:uuid_foreign_users_nullable,
        action:string_required,
        details:json_nullable,
        ipAddress:string_required,
        userAgent:string_nullable,
        success:boolean_required,
        createdAt:timestamp_auto
      )
    ),
    security:(
      authentication:(
        jwt:(
          secret:env.JWT_SECRET,
          algorithm:HS256,
          accessTokenExpiry:8h,
          refreshTokenExpiry:30d
        ),
        passwords:(
          minLength:8,
          requireUppercase:true,
          requireLowercase:true,
          requireNumbers:true,
          requireSpecialChars:true,
          preventReuse:12,
          hashRounds:12
        ),
        sessions:(
          maxConcurrent:5,
          extendOnActivity:true,
          invalidateOnPasswordChange:true
        ),
        twoFactor:(
          issuer:api.branding.name,
          window:1,
          backupCodes:8
        )
      ),
      rateLimit:(
        login:5_per_15min_by_ip,
        signup:3_per_hour_by_ip,
        forgot_password:3_per_hour_by_ip,
        password_reset:5_per_hour_by_ip,
        email_verification:3_per_hour_by_user,
        two_factor:5_per_15min_by_user
      ),
      oauth:(
        google:(
          clientId:env.GOOGLE_CLIENT_ID,
          clientSecret:env.GOOGLE_CLIENT_SECRET,
          scope:[openid, email, profile]
        ),
        github:(
          clientId:env.GITHUB_CLIENT_ID,
          clientSecret:env.GITHUB_CLIENT_SECRET,
          scope:[user:email]
        ),
        microsoft:(
          clientId:env.MICROSOFT_CLIENT_ID,
          clientSecret:env.MICROSOFT_CLIENT_SECRET,
          scope:[openid, email, profile]
        )
      ),
      email:(
        provider:sendgrid,
        apiKey:env.SENDGRID_API_KEY,
        fromEmail:env.FROM_EMAIL,
        fromName:env.FROM_NAME,
        templates:(
          verification:env.VERIFICATION_TEMPLATE_ID,
          password_reset:env.PASSWORD_RESET_TEMPLATE_ID,
          welcome:env.WELCOME_TEMPLATE_ID,
          password_changed:env.PASSWORD_CHANGED_TEMPLATE_ID
        )
      )
    ),
    deployment:(
      frontend:(
        platform:vercel,
        framework:nextjs,
        env:(
          NEXT_PUBLIC_API_URL:env.API_URL,
          NEXT_PUBLIC_GOOGLE_CLIENT_ID:env.GOOGLE_CLIENT_ID
        )
      ),
      backend:(
        platform:railway,
        runtime:node18,
        env:(
          DATABASE_URL:env.DATABASE_URL,
          JWT_SECRET:env.JWT_SECRET,
          SENDGRID_API_KEY:env.SENDGRID_API_KEY,
          GOOGLE_CLIENT_ID:env.GOOGLE_CLIENT_ID,
          GOOGLE_CLIENT_SECRET:env.GOOGLE_CLIENT_SECRET,
          GITHUB_CLIENT_ID:env.GITHUB_CLIENT_ID,
          GITHUB_CLIENT_SECRET:env.GITHUB_CLIENT_SECRET
        )
      ),
      database:(
        provider:postgresql,
        version:15,
        encryption:at_rest,
        backup:(
          automated:daily,
          retention:30d
        )
      )
    )
  )
}